{"version":3,"sources":["Sorting Visualiser/sortingVisualiser.jsx","Helper Functions/helper.js","Controller/controller.jsx","Sorting Algorithms/bubbleSort.js","Sorting Algorithms/insertionSort.js","Sorting Algorithms/mergeSort.js","Sorting Algorithms/quickSort.js","Sorting Algorithms/selectionSort.js","Helper Functions/reducer.js","App.jsx","index.jsx"],"names":["ArrayElement","value","width","margin","className","id","style","height","SortingVisualiser","appState","dispatch","arrData","elementWidth","arr","colorState","updateElementWidth","type","useEffect","window","addEventListener","removeEventListener","map","element","index","key","swap","i","j","temp","sleep","ms","a","Promise","resolve","setTimeout","generateNewArrayData","len","newArr","Array","Math","floor","random","innerHeight","includes","fill","sorted","updateColorState","indexes","length","speed","Controller","algorithms","sortSpeed","arrLength","startSort","e","document","querySelectorAll","forEach","button","disabled","target","classList","add","algo","Object","keys","algorithm","onClick","min","max","onChange","payload","Number","direction","reducer","state","action","innerWidth","marginNum","isSorting","remove","Error","bubbleSort","noSwap","insertionSort","colorStateBefore","toUpperCase","merge","start","middle","end","leftArr","rightArr","l","r","mergeSort","all","partition","partitionIndex","pivotValue","pivotIndex","quickSort","selectionSort","smallIndex","initialState","BubbleSort","InsertionSort","MergeSort","QuickSort","SelectionSort","App","useReducer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a8731276.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport './sortingVisualiser.css';\r\n\r\n// margin for the array elements\r\nexport const marginNum = 1;\r\n\r\nconst SortingVisualiser = ({ appState, dispatch }) => {\r\n  const { arrData, elementWidth } = appState;\r\n  const { arr, colorState } = arrData;\r\n\r\n  const margin = `${marginNum}px`;\r\n\r\n  const updateElementWidth = () => {\r\n    dispatch({\r\n      type: 'UPDATE_WIDTH',\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    window.addEventListener('resize', updateElementWidth);\r\n    return () => {\r\n      window.removeEventListener('resize', updateElementWidth);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"visualiser\">\r\n      {arr.map((element, index) => {\r\n        const className = `arrayElement ${colorState[index]}`;\r\n        const key = `pos-${index}`;\r\n        return (\r\n          <ArrayElement\r\n            key={key}\r\n            value={element}\r\n            width={elementWidth}\r\n            margin={margin}\r\n            className={className}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ArrayElement = ({ value, width, margin, className }) => (\r\n    <div\r\n      className={className}\r\n      id={value}\r\n      style={{\r\n        height: value,\r\n        width,\r\n        margin,\r\n      }}\r\n    />\r\n  );\r\nexport default SortingVisualiser;\r\n","export function swap(arr, i, j) {\r\n  const temp = arr[i];\r\n  arr[i] = arr[j];\r\n  arr[j] = temp;\r\n}\r\n\r\nexport async function sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const generateNewArrayData = (len) => {\r\n  const newArr = new Array(len);\r\n  for (let i = 0; i < len; i += 1) {\r\n    let value = Math.floor(Math.random() * (window.innerHeight / 2)) + 10;\r\n    while (newArr.includes(value)) {\r\n      value = Math.floor(Math.random() * (window.innerHeight / 2)) + 10;\r\n    }\r\n    newArr[i] = value;\r\n  }\r\n  return {\r\n    arr: newArr,\r\n    colorState: new Array(len).fill('unsorted'),\r\n    sorted: false,\r\n  };\r\n};\r\n\r\nexport function updateColorState(colorState, indexes, type) {\r\n  for (let i = 0; i < indexes.length; i += 1) {\r\n    colorState[indexes[i]] = type;\r\n  }\r\n}\r\n\r\nexport function enableInputs() {\r\n  document.querySelectorAll('button').forEach((button) => {\r\n    button.disabled = false;\r\n  });\r\n  document.querySelectorAll('input').forEach((element) => {\r\n    element.disabled = false;\r\n  });\r\n}\r\n\r\nexport function disableInputs() {\r\n  document.querySelectorAll('button').forEach((button) => {\r\n    button.disabled = true;\r\n  });\r\n  document.querySelectorAll('input').forEach((element) => {\r\n    element.disabled = true;\r\n  });\r\n}\r\n","import React from 'react';\r\nimport { disableInputs } from '../Helper Functions/helper';\r\n\r\nconst Controller = ({ appState, dispatch }) => {\r\n  const { algorithms, arrData, sortSpeed, arrLength } = appState;\r\n  const { colorState, sorted } = arrData;\r\n\r\n  const startSort = (e) => {\r\n    // reset the array color to unsorted before sorting again if array already sorted\r\n    if (sorted) colorState.fill('unsorted');\r\n\r\n    disableInputs();\r\n    e.target.classList.add('selected');\r\n\r\n    // run the algorithm for sorting\r\n    const algo = e.target.value;\r\n    algorithms[algo](appState, dispatch);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"controllerContainer\">\r\n        <div className=\"row\">\r\n          Algorithms:\r\n          {Object.keys(algorithms).map((algorithm) => (\r\n            <button\r\n              type=\"button\"\r\n              key={algorithm}\r\n              value={algorithm}\r\n              onClick={startSort}\r\n            >\r\n              {algorithm}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <div className=\"row\">\r\n          Size ({arrLength}):\r\n          <input\r\n            type=\"range\"\r\n            min=\"10\"\r\n            max=\"70\"\r\n            value={arrLength}\r\n            className=\"slider\"\r\n            id=\"size\"\r\n            onChange={(e) => {\r\n              dispatch({\r\n                type: 'CHANGE_LENGTH',\r\n                payload: Number(e.target.value),\r\n              });\r\n            }}\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              dispatch({ type: 'NEW_ARRAY' });\r\n              dispatch({ type: 'UPDATE_WIDTH' });\r\n            }}\r\n          >\r\n            Generate new array\r\n          </button>\r\n        </div>\r\n        <div className=\"row\">\r\n          Speed:\r\n          <input\r\n            type=\"range\"\r\n            min=\"10\"\r\n            max=\"500\"\r\n            value={sortSpeed}\r\n            className=\"slider\"\r\n            id=\"speed\"\r\n            style={{ direction: 'rtl' }}\r\n            onChange={(e) => {\r\n              dispatch({\r\n                type: 'CHANGE_SPEED',\r\n                payload: Number(e.target.value),\r\n              });\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Controller;\r\n","import { swap, sleep } from '../Helper Functions/helper';\r\n\r\nlet speed;\r\n\r\nasync function bubbleSort(arr, dispatch) {\r\n  let noSwap = false;\r\n\r\n  while (!noSwap) {\r\n    noSwap = true;\r\n    for (let i = 0; i < arr.length - 1; i += 1) {\r\n      dispatch({ type: 'COLOR_COMPARE', payload: [i, i + 1] });\r\n\r\n      if (arr[i] > arr[i + 1]) {\r\n        swap(arr, i, i + 1);\r\n        noSwap = false;\r\n      }\r\n      await sleep(speed);\r\n\r\n      dispatch({ type: 'COLOR_UNSORTED', payload: [i, i + 1] });\r\n    }\r\n  }\r\n  dispatch({ type: 'COLOR_SORTED', payload: [...Array(arr.length).keys()] });\r\n}\r\n\r\nexport default async function BubbleSort(appState, dispatch) {\r\n  const { arrData, sortSpeed } = appState;\r\n  const { arr } = arrData;\r\n  speed = sortSpeed;\r\n  dispatch({ type: 'START_SORT' });\r\n  await bubbleSort(arr, dispatch);\r\n  arrData.sorted = true;\r\n  dispatch({ type: 'SORTED' });\r\n}\r\n","import { sleep, swap } from '../Helper Functions/helper';\r\n\r\nlet speed;\r\n\r\nasync function insertionSort(arr, colorState, dispatch) {\r\n  /* first value is already sorted */\r\n  dispatch({ type: 'COLOR_SORTED', payload: [0] });\r\n\r\n  for (let i = 1; i < arr.length; i += 1) {\r\n    const key = arr[i];\r\n    let j = i - 1;\r\n\r\n    while (j >= 0 && key < arr[j]) {\r\n      const colorStateBefore = `COLOR_${colorState[j].toUpperCase()}`;\r\n      dispatch({ type: 'COLOR_COMPARE', payload: [j] });\r\n\r\n      await sleep(speed);\r\n      swap(arr, j, j + 1);\r\n      dispatch({ type: 'COLOR_SORTED', payload: [j + 1] });\r\n      dispatch({ type: colorStateBefore, payload: [j] });\r\n      j -= 1;\r\n    }\r\n    arr[j + 1] = key;\r\n    dispatch({ type: 'COLOR_SORTED', payload: [j + 1] });\r\n    await sleep(speed);\r\n  }\r\n}\r\n\r\nexport default async function InsertionSort(appState, dispatch) {\r\n  const { arrData, sortSpeed } = appState;\r\n  const { arr, colorState } = arrData;\r\n  speed = sortSpeed;\r\n  dispatch({ type: 'START_SORT' });\r\n  await insertionSort(arr, colorState, dispatch);\r\n  arrData.sorted = true;\r\n  dispatch({ type: 'SORTED' });\r\n}\r\n","import { sleep } from '../Helper Functions/helper';\r\n\r\nlet speed;\r\n\r\n// Helper function for mergeSort\r\nasync function merge(arr, start, middle, end, dispatch) {\r\n  /* end inclusive */\r\n  const leftArr = Array(middle + 1 - start);\r\n  const rightArr = Array(end - middle);\r\n  let index = start;\r\n\r\n  /* make a copy of the left part of the array */\r\n  for (let i = 0; i < leftArr.length; i += 1) {\r\n    leftArr[i] = arr[index];\r\n    index += 1;\r\n  }\r\n\r\n  /* make a copy of the right part of the array */\r\n  for (let i = 0; i < rightArr.length; i += 1) {\r\n    rightArr[i] = arr[index];\r\n    index += 1;\r\n  }\r\n\r\n  let l = 0;\r\n  let r = 0;\r\n  let i = start; /* index of the array to insert sorted value */\r\n  while (l < leftArr.length && r < rightArr.length) {\r\n    dispatch({ type: 'COLOR_COMPARE', payload: [i] });\r\n    await sleep(speed);\r\n\r\n    if (leftArr[l] <= rightArr[r]) {\r\n      arr[i] = leftArr[l];\r\n      l += 1;\r\n    } else {\r\n      arr[i] = rightArr[r];\r\n      r += 1;\r\n    }\r\n\r\n    await sleep(speed);\r\n    dispatch({ type: 'COLOR_UNSORTED', payload: [i] });\r\n    i += 1;\r\n  }\r\n\r\n  /* insert left over sorted elements */\r\n  while (l < leftArr.length) {\r\n    arr[i] = leftArr[l];\r\n    dispatch({ type: 'COLOR_COMPARE', payload: [i] });\r\n    await sleep(speed);\r\n    dispatch({ type: 'COLOR_UNSORTED', payload: [i] });\r\n\r\n    l += 1;\r\n    i += 1;\r\n  }\r\n  while (r < rightArr.length) {\r\n    arr[i] = rightArr[r];\r\n    dispatch({ type: 'COLOR_COMPARE', payload: [i] });\r\n    await sleep(speed);\r\n    dispatch({ type: 'COLOR_UNSORTED', payload: [i] });\r\n\r\n    r += 1;\r\n    i += 1;\r\n  }\r\n}\r\n\r\nasync function mergeSort(arr, start, end, dispatch) {\r\n  if (start >= end) {\r\n    return;\r\n  }\r\n  const middle = Math.floor((start + end) / 2);\r\n\r\n  await Promise.all([\r\n    mergeSort(arr, start, middle, dispatch),\r\n    mergeSort(arr, middle + 1, end, dispatch),\r\n  ]);\r\n  await merge(arr, start, middle, end, dispatch);\r\n}\r\n\r\nexport default async function MergeSort(appState, dispatch) {\r\n  const { arrData, sortSpeed } = appState;\r\n  const { arr } = arrData;\r\n  speed = sortSpeed;\r\n  dispatch({ type: 'START_SORT' });\r\n  await mergeSort(arr, 0, arr.length - 1, dispatch);\r\n  arrData.sorted = true;\r\n  dispatch({ type: 'COLOR_SORTED', payload: [...Array(arr.length).keys()] });\r\n  dispatch({ type: 'SORTED' });\r\n}\r\n","import { swap, sleep } from '../Helper Functions/helper';\r\n\r\nlet speed;\r\n\r\n/* Helper function for quicksort */\r\nasync function partition(arr, start, end, dispatch) {\r\n  let partitionIndex = start;\r\n  const pivotIndex = end;\r\n  const pivotValue = arr[pivotIndex];\r\n\r\n  /* update color of element on canvas to partition color */\r\n  dispatch({ type: 'COLOR_PIVOT', payload: [partitionIndex] });\r\n\r\n  for (let i = start; i < end; i += 1) {\r\n    /* change color to being compared */\r\n    dispatch({ type: 'COLOR_COMPARE', payload: [i] });\r\n\r\n    if (arr[i] < pivotValue) {\r\n      swap(arr, i, partitionIndex);\r\n     \r\n      /* change back to unsorted color before swapping */\r\n      dispatch({ type: 'COLOR_UNSORTED', payload: [partitionIndex] });\r\n      partitionIndex += 1;\r\n      \r\n      /* update color of element to partition */\r\n      dispatch({ type: 'COLOR_PIVOT', payload: [partitionIndex] });\r\n    }\r\n    await sleep(speed);\r\n    \r\n    /* change color back to unsorted */\r\n    dispatch({ type: 'COLOR_UNSORTED', payload: [i] });\r\n  }\r\n  swap(arr, partitionIndex, pivotIndex);\r\n  \r\n  /* change color of element to sorted */\r\n  dispatch({ type: 'COLOR_SORTED', payload: [partitionIndex] });\r\n\r\n  return partitionIndex;\r\n}\r\n\r\nasync function quickSort(arr, start, end, dispatch) {\r\n  if (start >= end) {\r\n    /* change color of element to sorted  */\r\n    dispatch({ type: 'COLOR_SORTED', payload: [start] });\r\n    return true;\r\n  }\r\n\r\n  const partitionIndex = await partition(arr, start, end, dispatch);\r\n\r\n  await Promise.all([\r\n    quickSort(arr, start, partitionIndex - 1, dispatch),\r\n    quickSort(arr, partitionIndex + 1, end, dispatch),\r\n  ]);\r\n  return true;\r\n}\r\n\r\nexport default async function QuickSort(appState, dispatch) {\r\n  const { arrData, sortSpeed } = appState;\r\n  const { arr } = arrData;\r\n  speed = sortSpeed;\r\n  dispatch({ type: 'START_SORT' });\r\n  await quickSort(arr, 0, arr.length - 1, dispatch);\r\n  arrData.sorted = true;\r\n  dispatch({ type: 'SORTED' });\r\n}\r\n","import { swap, sleep } from '../Helper Functions/helper';\r\n\r\nlet speed;\r\n\r\nasync function selectionSort(arr, dispatch) {\r\n  for (let i = 0; i < arr.length; i += 1) {\r\n    let smallIndex = i;\r\n\r\n    /* Color the smallest element */\r\n    dispatch({ type: 'COLOR_PIVOT', payload: [smallIndex] });\r\n    for (let j = i; j < arr.length; j += 1) {\r\n      /* being compared color */\r\n      dispatch({ type: 'COLOR_COMPARE', payload: [j] });\r\n      await sleep(speed);\r\n      if (arr[j] < arr[smallIndex]) {\r\n        /* change back to unsorted before swapping */\r\n        dispatch({ type: 'COLOR_UNSORTED', payload: [smallIndex] });\r\n        smallIndex = j;\r\n\r\n        /* color the smallest element */\r\n        dispatch({ type: 'COLOR_PIVOT', payload: [smallIndex] });\r\n      } else {\r\n        /* if not the smallest change back to unsorted color */\r\n        dispatch({ type: 'COLOR_UNSORTED', payload: [j] });\r\n      }\r\n    }\r\n    swap(arr, i, smallIndex);\r\n\r\n    /* element is now sorted */\r\n    dispatch({ type: 'COLOR_SORTED', payload: [i] });\r\n    if (i !== smallIndex) {\r\n      /* unsorted color */\r\n      dispatch({ type: 'COLOR_UNSORTED', payload: [smallIndex] });\r\n    }\r\n  }\r\n}\r\n\r\nexport default async function SelectionSort(appState, dispatch) {\r\n  const { arrData, sortSpeed } = appState;\r\n  const { arr } = arrData;\r\n  speed = sortSpeed\r\n  dispatch({ type: 'START_SORT' });\r\n  await selectionSort(arr, dispatch);\r\n  arrData.sorted = true;\r\n  dispatch({ type: 'SORTED' });\r\n}\r\n","import { updateColorState, generateNewArrayData, enableInputs } from './helper';\r\nimport { marginNum } from '../Sorting Visualiser/sortingVisualiser';\r\n\r\nconst reducer = (state, action) => {\r\n  const { arrLength, arrData } = state;\r\n  const { colorState } = arrData;\r\n  const { payload } = action;\r\n\r\n  switch (action.type) {\r\n    case 'NEW_ARRAY':\r\n      return { ...state, arrData: generateNewArrayData(arrLength) };\r\n    case 'CHANGE_SPEED':\r\n      return { ...state, sortSpeed: payload };\r\n    case 'CHANGE_LENGTH':\r\n      return { ...state, arrLength: payload };\r\n    case 'UPDATE_WIDTH':\r\n      return {\r\n        ...state,\r\n        elementWidth:\r\n          Math.floor((0.8 * window.innerWidth) / arrLength) - marginNum * 2,\r\n      };\r\n\r\n    /* cases for sorting */\r\n    case 'START_SORT':\r\n      return { ...state, isSorting: true };\r\n    case 'COLOR_COMPARE':\r\n      updateColorState(colorState, payload, 'compare');\r\n      return { ...state };\r\n    case 'COLOR_UNSORTED':\r\n      updateColorState(colorState, payload, 'unsorted');\r\n      return { ...state };\r\n    case 'COLOR_SORTED':\r\n      updateColorState(colorState, payload, 'sorted');\r\n      return { ...state };\r\n    case 'COLOR_PIVOT':\r\n      updateColorState(colorState, payload, 'partition');\r\n      return { ...state };\r\n    case 'SORTED':\r\n      document.querySelectorAll('.selected').forEach((e) => {\r\n        e.classList.remove('selected');\r\n      });\r\n      enableInputs();\r\n      return {\r\n        ...state,\r\n        isSorting: false,\r\n        arrData: { ...arrData, sorted: true },\r\n      };\r\n    /* end cases for sorting */\r\n\r\n    default:\r\n      throw new Error(`Incorrect dispatch action type - ${action.type}`);\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import './App.css';\r\n\r\nimport React, { useReducer } from 'react';\r\nimport SortingVisualiser from './Sorting Visualiser/sortingVisualiser';\r\nimport Controller from './Controller/controller';\r\nimport { generateNewArrayData } from './Helper Functions/helper';\r\nimport reducer from './Helper Functions/reducer';\r\nimport BubbleSort from './Sorting Algorithms/bubbleSort';\r\nimport InsertionSort from './Sorting Algorithms/insertionSort';\r\nimport MergeSort from './Sorting Algorithms/mergeSort';\r\nimport QuickSort from './Sorting Algorithms/quickSort';\r\nimport SelectionSort from './Sorting Algorithms/selectionSort';\r\n\r\nconst initialState = {\r\n  arrLength: 50,\r\n  arrData: generateNewArrayData(50),\r\n  elementWidth: Math.floor((0.8 * window.innerWidth) / 50) - 2,\r\n  algorithms: {\r\n    'Bubble Sort': (appState, dispatch) => BubbleSort(appState, dispatch),\r\n    'Insertion Sort': (appState, dispatch) => InsertionSort(appState, dispatch),\r\n    'Merge Sort': (appState, dispatch) => MergeSort(appState, dispatch),\r\n    'Quick Sort': (appState, dispatch) => QuickSort(appState, dispatch),\r\n    'Selection Sort': (appState, dispatch) => SelectionSort(appState, dispatch),\r\n  },\r\n  isSorting: false,\r\n  sortSpeed: 50,\r\n};\r\n\r\nexport default function App() {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <>\r\n      <h1>Sorting Visualiser</h1>\r\n      <SortingVisualiser appState={state} dispatch={dispatch} />\r\n      <Controller appState={state} dispatch={dispatch} />\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}